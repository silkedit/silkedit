#!/bin/bash

# -e: stops if any command returns non zero value
set -e

# Constants

API_DOC_DIR=jsdoc_out
VERSION=$(grep "SilkEdit VERSION" CMakeLists.txt| grep -E -o "[0-9]+\.[0-9]+\.[0-9]+")

if [ "$(uname)" = 'Darwin' ]; then
  OS='Mac'
  SDK_PATH=`xcrun --show-sdk-path`
  export MACOSX_DEPLOYMENT_TARGET=10.8
  CONAN_ARCH=x86_64
elif [ "$(expr substr $(uname -s) 1 5)" = 'Linux' ]; then
  OS='Linux'
elif [ "$(expr substr $(uname -s) 1 4)" = 'MSYS' ]; then
  if [ "$Platform" = "x64" ]; then
    OS='Win64'
    GENERATOR="Visual Studio 14 2015 Win64"
    VCVARSALL_ARG=amd64
    ARCH=x64
    CONAN_ARCH=x86_64
    NUGET_ARCH=x64
  else
    OS='Win32'
    GENERATOR="Visual Studio 14 2015"
    VCVARSALL_ARG=x86
    ARCH=x86
    CONAN_ARCH=x86
    NUGET_ARCH=ia32
  fi

  PROGRAM_FILES="$(env | awk -F= '$1=="ProgramFiles(x86)"{print $2}')"
  UCRT_DIR="$PROGRAM_FILES/Windows Kits\10\Redist\ucrt\DLLs/$ARCH"
  VCRT_DIR="$PROGRAM_FILES/Microsoft Visual Studio 14.0/VC/redist/$ARCH/Microsoft.VC140.CRT"
  VisualStudioVersion=14.0
  # Add MSBuild.exe path to PATH
  MSBUILD_PATH="$PROGRAM_FILES/MSBuild/$VisualStudioVersion/Bin"
  PATH=$MSBUILD_PATH:$PATH
  command -v MSBuild.exe >/dev/null 2>&1 || ( echo 'MSBuild.exe not found'; exit 1 )
elif [ "$(expr substr $(uname -s) 1 5)" = 'MINGW' ]; then
  echo "You're running this program on MINGW. Please run it from msys2_shell.bat"
  exit 1
else
  echo "Your platform ($(uname -a)) is not supported."
  exit 1
fi

format() {
    find src -name \*.cpp -or -name \*.h | xargs clang-format -i
    find test/src -name \*.cpp -or -name \*.h | xargs clang-format -i
    if [ "$1" = '-commit' -o "$1" = '-push' ]; then
        git commit -am "clang-format"
    fi

    if [ "$1" = '-push' ]; then
        if git status | grep -sq "Your branch is ahead of"; then
            git push origin HEAD:master
        fi
        exit 0
    fi
}

# Create a new directory with the specified name if it doesn't exist.
# Recreate it if it already exists.
ensure_dir() {
    if [ -d $1 ]; then
        echo "Recreating $1 directory..."
        rm -rf $1
    else
        echo "Creating $1 directory..."
    fi

    mkdir -p $1
}

clean() {
    # Somehow git clean fails to remove this directory, so remove it manually
    rm -rf build

    # clean submodules
    git submodule foreach git reset --hard HEAD
    git submodule foreach git clean -xdf

    # remove everything not tracked in git
    git clean -xdf
}

# resolve dependency
resolve() {
    git submodule update --init

    # Source Han Code JP font
    ARCHIVE=SourceHanCodeJP-Fonts.zip
    curl -fsSL -o ${ARCHIVE} https://github.com/silkedit/silkedit-assets/releases/download/0.1.0/${ARCHIVE}
    unzip SourceHanCodeJP-Fonts.zip
    mkdir -p resources/fonts
    mv SourceHanCodeJP-Fonts/*.otf resources/fonts
    rm -rf SourceHanCodeJP-Fonts*

    # npm install for minifying JS
    npm install --force

    # npm install for bundled packages
    cd packages
    npm install --production
    cd ..

    # npm install for silkedit package
    cd jslib/node_modules/silkedit
    npm install --production
    # remove syntax-error's test and example codes because they cause SyntaxError when uglifying
    rm -rf node_modules/syntax-error/test node_modules/syntax-error/example
    cd ../../..
    
    # Download custom ICU data file
    ICU_DATA_FILE=icudt57l.zip
    wget https://github.com/silkedit/silkedit-assets/releases/download/0.1.0/${ICU_DATA_FILE}
    unzip ${ICU_DATA_FILE}
    mv icudt57l.dat resources
    rm -rf ${ICU_DATA_FILE}

    if [ $OS = 'Mac' ]; then
      # Download Squirrel
      carthage bootstrap --platform Mac

      # Download BugSplat breakpad to send a symbol using dump_sdk_symbols (symupload can't be built on Mac)
      if [ ! -f vendor/bugsplat/Breakpad.framework/Resources/dump_sdk_symbols ]; then
        mkdir -p vendor/bugsplat
        cd vendor/bugsplat
        wget https://github.com/silkedit/silkedit-assets/releases/download/0.1.0/Breakpad.framework.zip
        unzip -o Breakpad.framework.zip
        rm Breakpad.framework.zip
        cd ../..
      fi
    else
      nuget restore -PackagesDirectory nuget_packages
    fi
}

minify() {
    echo "Minifying JS files"
    npm run minify

    echo "Generating resources/LICENSE.md"
    npm run generate-license
}

# release build
build() {
    if [ ! -d build ]; then
        echo "build directory doesn't exist. Creating it..."
        ensure_dir build
    fi

    cd build

    # --build=missing is required because there's no breakpad MacOS binary in conan.io
    conan install .. -s arch=$CONAN_ARCH --build=missing

    if [ $OS = 'Mac' ]; then
        if [ "$1" = '--edge' ]; then
            cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DBUILD_EDGE=ON -G Ninja .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_SYSROOT=${SDK_PATH}
        else
            cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_SYSROOT=${SDK_PATH}
        fi

        ninja
    else
        if [ "$1" = '--edge' ]; then
          ../build.bat $VCVARSALL_ARG "$GENERATOR" all_build edge
        else
          ../build.bat $VCVARSALL_ARG "$GENERATOR" all_build
        fi
    fi

    cd ..
}

make_installer() {
    declare -i argc=0
    declare -a argv=()

    while (( $# > 0 ))
    do
        case "$1" in
            --*)
                if [[ "$1" =~ 'edge' ]]; then
                    EDGE=true
                    echo 'installer for edge build'
                fi
                if [[ "$1" =~ 'sign' ]]; then
                    SIGN=true
                fi
                shift
                ;;
            *)
                ((++argc))
                argv=("${argv[@]}" "$1")
                shift
                ;;
        esac
    done

    if [ ! -d build ]; then
      build
    fi

    cd build

    if [ $OS = 'Mac' ]; then
        if [ "$EDGE" = true ];then
          BUNDLE_NAME="SilkEdit Edge.app"
        else
          BUNDLE_NAME="SilkEdit.app"
        fi
        echo "Creating zip..."
        macdeployqt "${BUNDLE_NAME}" -qmldir=../resources/qmls

        if [ "$SIGN" = true ];then
          if [ ${#argv[@]} = 1 ];then
            codesign --force --verify --verbose --deep "${BUNDLE_NAME}" --sign "${argv[0]}"
          else
            echo 'error: no key specified'
            exit 1
          fi
        fi

        ditto -ck --sequesterRsrc --keepParent "${BUNDLE_NAME}" SilkEdit.zip
    else
        mkdir -p Release
        # Can't use mv because mv fails when Release/packages already exists
        cp -r silkedit.exe onig.dll node.dll icuuc57.dll icudt57.dll silk_resources Release
        #crashreporter
        cp -r crashreporter/crashreporter.exe crashreporter/crashreporter_*.qm Release
        cd Release

        windeployqt --release --no-compiler-runtime --qmldir ../../resources/qmls silkedit.exe

        # Copy URCT
        RELEASE_DIR=`pwd`
        cd "$UCRT_DIR"
        cp api-ms-win-*.dll ucrtbase.dll $RELEASE_DIR

        # Copy VC Runtime
        cd "$VCRT_DIR"
        cp msvcp140.dll vcruntime140.dll $RELEASE_DIR
        attrib -r $RELEASE_DIR/msvcp140.dll
        attrib -r $RELEASE_DIR/vcruntime140.dll
        cd $RELEASE_DIR

        if [ "$EDGE" = true ];then
          # set an app icon for edge build and change AppName
          NUGET_ID="SilkEdit_Edge-${NUGET_ARCH}"
          NUGET_TITLE="SilkEdit_Edge"
          NUGET_ICON_URL="https://raw.githubusercontent.com/silkedit/silkedit/master/resources/silkedit_edge.ico"
        else
          NUGET_ID="SilkEdit-${NUGET_ARCH}"
          NUGET_TITLE="SilkEdit"
          NUGET_ICON_URL="https://raw.githubusercontent.com/silkedit/silkedit/master/resources/silkedit.ico"
        fi

        nuget pack ../../SilkEdit.nuspec -Version ${VERSION} -properties "id=${NUGET_ID};title=${NUGET_TITLE};icon_url=${NUGET_ICON_URL}"
        NUPKG="${NUGET_ID}.${VERSION}.nupkg"
        set +e  # Squirrel returns 127 even if it succeeds.
        ../../nuget_packages/squirrel.windows/1.4.4/tools/Squirrel --releasify ${NUPKG}
        set -e

        mv Releases/Setup.exe "Releases/${NUGET_ID}-Setup.exe"
        if [ "$ARCH" = "x64" ]; then
          mv Releases/RELEASES Releases/RELEASES-x64
        fi
    fi

    cd ..
}

rebuild() {
    ensure_dir build
    build $1
}

# static analysis
analyze() {
    if [ $OS = 'Win32' ]; then
        echo "Not implemented yet on Windows"
        exit 1
    fi

    tmpFile=/tmp/clang-check-err
    find src widgets core -name '*.cpp' |xargs clang-check -analyze -p build 2>&1 | tee $tmpFile
    if [ $(cat $tmpFile | grep warning | wc -l) != 0 ]; then
      rm -rf $tmpFile
      exit 1
    fi
    rm -rf $tmpFile
}

run_ctest() {
    TARGET=$1
    cd build
    if [ $OS = 'Mac' ]; then
        cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -G Ninja .. -DCMAKE_BUILD_TYPE=Debug
        if [ -f build.ninja ]; then
            ninja $TARGET
            ctest --output-on-failure --no-compress-output -L $TARGET
        fi
    else
        ../build.bat $VCVARSALL_ARG "$GENERATOR" $TARGET
        ctest --output-on-failure --no-compress-output -C Release -L $TARGET
    fi
}

set_version() {
    if [ $# -ne 1 ]; then
        echo 'Specify a version number (e.g., 1.0.0)'
    else
        sed -i -E "s/SilkEdit VERSION [0-9]+\.[0-9]+\.[0-9]+/SilkEdit VERSION $1/" CMakeLists.txt
        commaVersion=$(echo $1 | sed -E 's/\./,/g')
        sed -i -E "s/VER_VERSION             [0-9]+,[0-9]+,[0-9]+/VER_VERSION             $commaVersion/" resources/silkedit.rc resources/silkedit_edge.rc
        sed -i -E "s/VER_VERSION_STR         \"[0-9]+\.[0-9]+\.[0-9]+\\\\0\"/VER_VERSION_STR         \"$1\\\\0\"/" resources/silkedit.rc resources/silkedit_edge.rc
        sed -i -E "s/version\": \"[0-9]+\.[0-9]+\.[0-9]+\"/version\": \"$1\"/" jsdoc/package.json
        git add CMakeLists.txt resources/silkedit.rc resources/silkedit_edge.rc jsdoc/package.json
        git commit -m "Bump version to $1"
    fi
}

localize() {
    lupdate src core widgets resources/qmls -ts resources/translations/silkedit_ja.ts
    #CrashReporter
    lupdate ./crashreporter/src -ts ./crashreporter/trans/crashreporter_ja.ts
}

send_symbol() {
    if [ "$1" = '--edge' ]; then
      APP_NAME="SilkEdit Edge"
      BUGSPLAT_APP_NAME="SilkEdit_Edge"
    else
      APP_NAME="SilkEdit"
      BUGSPLAT_APP_NAME="SilkEdit"
    fi

    echo "sending symbol with app name:${APP_NAME}, version: ${VERSION}"

    if [ $OS = 'Mac' ]; then
      DSYM_DIR="/tmp/SilkEdit.dSYM"
      rm -rf ${DSYM_DIR}
      dsymutil "build/${APP_NAME}.app/Contents/MacOS/${APP_NAME}" -o ${DSYM_DIR}
      vendor/bugsplat/Breakpad.framework/Resources/dump_sdk_symbols -d silkeditapp_gmail_com -a "${BUGSPLAT_APP_NAME}" -v ${VERSION} -s ${DSYM_DIR}
    else
      TMP_BAT=tmp.bat
      cp activate.bat $TMP_BAT
      ARG="http://silkeditapp_gmail_com.bugsplatsoftware.com/post/bp/symbol/breakpadsymbols.php?appName=${BUGSPLAT_APP_NAME}&appVer=${VERSION}"
      echo " & symupload.exe ./build/SilkEdit.exe $ARG" >> $TMP_BAT
      ./$TMP_BAT
      rm $TMP_BAT
    fi
}

generate_doc() {
  rm -rf ${API_DOC_DIR} && jsdoc -r jslib/node_modules/silkedit -c jsdoc/conf.json -t node_modules/ink-docstrap/template --readme jsdoc/README.md --tutorials jsdoc/tutorial --package jsdoc/package.json -d ${API_DOC_DIR}

  # change JSDoc hard coded title
  TITLE="SilkEdit APIリファレンス"
  sed -i -E "s/JSDoc: Home/${TITLE}/" ${API_DOC_DIR}/SilkEdit/${VERSION}/index.html

  # set favicon
  FAVICON="http://silksmiths.sakura.ne.jp/files/SilkEdit/favicon.ico"
  sed -i -E "s#</head>#<link rel=\"icon\" href=\"${FAVICON}\"></head>#" ${API_DOC_DIR}/SilkEdit/${VERSION}/index.html

  echo "API document is generated in ${API_DOC_DIR}"
}

upload_doc() {
  generate_doc

  ssh silksmiths@silksmiths.sakura.ne.jp "mkdir -p ~/www/silkedit/docs/api/"

  # upload to FTP
  scp -r ${API_DOC_DIR}/SilkEdit/${VERSION} silksmiths@silksmiths.sakura.ne.jp:~/www/silkedit/docs/api/

  # make current version as the latest API document
  DIST="~/www/silkedit/docs/api/${VERSION}"
  LATEST="~/www/silkedit/docs/api/latest"
  ssh silksmiths@silksmiths.sakura.ne.jp "rm -f ${LATEST} && ln -s ${DIST} ${LATEST}"
}

case "$1" in
    analyze)
        analyze
        echo
        ;;
    benchmark)
        run_ctest benchmark
        echo
        ;;
    build)
        build $2
        echo
        ;;
    clean)
        clean
        echo
        ;;
    format)
        # grep return 1 if it doesn't match anything, so disable -e here
        set +e
        format $2
        echo
        ;;
    generate_doc)
        generate_doc
        echo
        ;;
    rebuild)
        rebuild $2
        echo
        ;;
    resolve)
        resolve $2
        echo
        ;;
    test)
        run_ctest unit_test
        echo
        ;;
    set_version)
        set_version $2
        echo
        ;;
    localize)
        localize
        echo
        ;;
    make_installer)
        shift;
        make_installer "$@"
        echo
        ;;
    minify)
        minify
        echo
        ;;
    send_symbol)
        send_symbol $2
        echo
        ;;
    upload_doc)
        upload_doc
        echo
        ;;
    *)

        cat << EOF
analyze        static analysis
benchmark      run benchmarks
build          build an app and an installer (--edge: Edge build)
clean          clean build dir
format         format sources
generate_doc   generate SilkEdit package API document
localize       run lupdate to generate a ts file for localization
make_installer make an installer (--sign identity: sign the app, --edge: for Edge build)
minify         minify JS codes
rebuild        build from scratch (--edge: for Edge build)
resolve        resolve dependency (--skip-build: skip building libraries)
test           run tests
set_version    set version number
send_symbol    send application symbol to server (--edge: for Edge build)
upload_doc     upload package API document
EOF

        exit 1
esac

exit 0
